local LuminaLib = {
    Version = "1.0.0",
    Flags = {},
    Theme = {
        Primary = Color3.fromRGB(20, 20, 25),
        Secondary = Color3.fromRGB(30, 30, 35),
        Accent = Color3.fromRGB(100, 130, 255),
        Text = Color3.fromRGB(240, 240, 240),
        Disabled = Color3.fromRGB(60, 60, 70),
        Success = Color3.fromRGB(85, 255, 127),
        Error = Color3.fromRGB(255, 89, 89),
        Warning = Color3.fromRGB(255, 185, 95),
        Hover = Color3.fromRGB(40, 40, 45),
        SliderBackground = Color3.fromRGB(45, 45, 50),
    },
    Settings = {
        DragSpeed = 0.2,
        AnimationSpeed = 0.2,
        NotificationDuration = 3,
        DropdownMaxItems = 8,
        DefaultKeybind = Enum.KeyCode.RightControl,
    }
}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")

-- Constants
local TWEEN_INFO = TweenInfo.new(LuminaLib.Settings.AnimationSpeed, Enum.EasingStyle.Quad)
local CORNER_RADIUS = UDim.new(0, 6)
local LOCAL_PLAYER = Players.LocalPlayer

-- Utility Functions
local Utility = {}

function Utility.tween(instance, properties)
    local tween = TweenService:Create(instance, TWEEN_INFO, properties)
    tween:Play()
    return tween
end

function Utility.createShadow(parent, shadowSize)
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, shadowSize or 47, 1, shadowSize or 47)
    shadow.ZIndex = -1
    shadow.Image = "rbxassetid://6015897843"
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.Parent = parent
    return shadow
end

function Utility.createRipple(parent)
    local ripple = Instance.new("Frame")
    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple
    
    local position = UserInputService:GetMouseLocation() - parent.AbsolutePosition
    ripple.Position = UDim2.new(0, position.X, 0, position.Y)
    
    local size = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    local tween = Utility.tween(ripple, {
        Size = UDim2.new(0, size, 0, size),
        BackgroundTransparency = 1
    })
    
    tween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

function Utility.formatNumber(number)
    if number >= 1000000 then
        return string.format("%.1fM", number / 1000000)
    elseif number >= 1000 then
        return string.format("%.1fK", number / 1000)
    end
    return tostring(number)
end

-- Notification System
LuminaLib.Notifications = {}

function LuminaLib:Notify(options)
    options = typeof(options) == "table" and options or {
        title = options,
        content = "No content provided",
        duration = LuminaLib.Settings.NotificationDuration,
        type = "Info" -- Info, Success, Warning, Error
    }
    
    local notification = {}
    local notifGui = Instance.new("ScreenGui")
    notifGui.Name = "LuminaNotification"
    
    -- Create notification frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 80)
    frame.Position = UDim2.new(1, 20, 1, -90)
    frame.BackgroundColor3 = LuminaLib.Theme.Secondary
    frame.BorderSizePixel = 0
    frame.Parent = notifGui
    
    Instance.new("UICorner", frame).CornerRadius = CORNER_RADIUS
    Utility.createShadow(frame)
    
    -- Add icon based on type
    local icons = {
        Info = "rbxassetid://6031071053",
        Success = "rbxassetid://6031071057",
        Warning = "rbxassetid://6031071054",
        Error = "rbxassetid://6031071050"
    }
    
    local icon = Instance.new("ImageLabel")
    icon.Size = UDim2.new(0, 20, 0, 20)
    icon.Position = UDim2.new(0, 15, 0, 15)
    icon.BackgroundTransparency = 1
    icon.Image = icons[options.type] or icons.Info
    icon.ImageColor3 = LuminaLib.Theme[options.type] or LuminaLib.Theme.Accent
    icon.Parent = frame
    
    -- Add title and content
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -50, 0, 20)
    title.Position = UDim2.new(0, 45, 0, 15)
    title.BackgroundTransparency = 1
    title.Text = options.title
    title.TextColor3 = LuminaLib.Theme.Text
    title.TextSize = 16
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = frame
    
    local content = Instance.new("TextLabel")
    content.Size = UDim2.new(1, -30, 0, 35)
    content.Position = UDim2.new(0, 15, 0, 40)
    content.BackgroundTransparency = 1
    content.Text = options.content
    content.TextColor3 = LuminaLib.Theme.Text
    content.TextSize = 14
    content.Font = Enum.Font.Gotham
    content.TextXAlignment = Enum.TextXAlignment.Left
    content.TextWrapped = true
    content.Parent = frame
    
    -- Animation
    notifGui.Parent = CoreGui
    Utility.tween(frame, {Position = UDim2.new(1, -320, 1, -90)})
    
    task.delay(options.duration, function()
        Utility.tween(frame, {Position = UDim2.new(1, 20, 1, -90)}).Completed:Connect(function()
            notifGui:Destroy()
        end)
    end)
    
    return notification
end

-- Keybind System
LuminaLib.Keybinds = {}

function LuminaLib:BindToKey(key, callback)
    local bind = {
        Key = key,
        Callback = callback,
        Active = true
    }
    
    table.insert(LuminaLib.Keybinds, bind)
    
    return {
        Unbind = function()
            bind.Active = false
            for i, v in pairs(LuminaLib.Keybinds) do
                if v == bind then
                    table.remove(LuminaLib.Keybinds, i)
                    break
                end
            end
        end
    }
end

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        for _, bind in pairs(LuminaLib.Keybinds) do
            if bind.Active and input.KeyCode == bind.Key then
                bind.Callback()
            end
        end
    end
end)

-- Main Window Creation
function LuminaLib.new(config)
    config = config or {}
    local window = {
        Tabs = {},
        ActiveTab = nil,
        Flags = {},
        Hidden = false
    }

    -- Create main GUI
    local gui = Instance.new("ScreenGui")
    gui.Name = "LuminaLib"
    gui.ResetOnSpawn = false
    
    -- Protection for exploits
    if syn and syn.protect_gui then
        syn.protect_gui(gui)
        gui.Parent = CoreGui
    else
        gui.Parent = LOCAL_PLAYER:WaitForChild("PlayerGui")
    end
    
    -- Main container
    local mainContainer = Instance.new("Frame")
    mainContainer.Name = "MainContainer"
    mainContainer.Size = UDim2.new(0, 700, 0, 450)
    mainContainer.Position = UDim2.new(0.5, -350, 0.5, -225)
    mainContainer.BackgroundColor3 = LuminaLib.Theme.Primary
    mainContainer.BorderSizePixel = 0
    mainContainer.Parent = gui
    
    Instance.new("UICorner", mainContainer).CornerRadius = CORNER_RADIUS
    Utility.createShadow(mainContainer)
    
    -- Create title bar with minimize/close buttons
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = LuminaLib.Theme.Secondary
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainContainer
    
    Instance.new("UICorner", titleBar).CornerRadius = CORNER_RADIUS
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -120, 1, 0)
    title.Position = UDim2.new(0, 15, 0, 0)
    title.BackgroundTransparency = 1
    title.Text = config.title or "Lumina Library"
    title.TextColor3 = LuminaLib.Theme.Text
    title.TextSize = 18
    title.Font = Enum.Font.GothamBold
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("ImageButton")
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.Position = UDim2.new(1, -30, 0, 10)
    closeButton.BackgroundTransparency = 1
    closeButton.Image = "rbxassetid://6031094678"
    closeButton.ImageColor3 = LuminaLib.Theme.Text
    closeButton.Parent = titleBar
    
    closeButton.MouseEnter:Connect(function()
        Utility.tween(closeButton, {ImageColor3 = LuminaLib.Theme.Error})
    end)
    
    closeButton.MouseLeave:Connect(function()
        Utility.tween(closeButton, {ImageColor3 = LuminaLib.Theme.Text})
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)
    
    -- Minimize button
    local minimizeButton = Instance.new("ImageButton")
    minimizeButton.Size = UDim2.new(0, 20, 0, 20)
    minimizeButton.Position = UDim2.new(1, -60, 0, 10)
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.Image = "rbxassetid://6031090990"
    minimizeButton.ImageColor3 = LuminaLib.Theme.Text
    minimizeButton.Parent = titleBar
    
    minimizeButton.MouseButton1Click:Connect(function()
        window.Hidden = not window.Hidden
        Utility.tween(mainContainer, {
            Size = window.Hidden and UDim2.new(0, 700, 0, 40) or UDim2.new(0, 700, 0, 450)
        })
    end)
    
    -- Search bar
    local searchBar = Instance.new("TextBox")
    searchBar.Size = UDim2.new(0, 200, 0, 25)
    searchBar.Position = UDim2.new(1, -270, 0, 8)
    searchBar.BackgroundColor3 = LuminaLib.Theme.Primary
    searchBar.PlaceholderText = "Search..."
    searchBar.Text = ""
    searchBar.TextColor3 = LuminaLib.Theme.Text
    searchBar.PlaceholderColor3 = LuminaLib.Theme.Disabled
    searchBar.Font = Enum.Font.Gotham
    searchBar.TextSize = 14
    searchBar.Parent = titleBar
    
    Instance.new("UICorner", searchBar).CornerRadius = UDim.new(0, 4)
    
    -- Tab system with icons
    local tabContainer = Instance.new("ScrollingFrame")
    tabContainer.Name = "TabContainer"
    tabContainer.Size = UDim2.new(0, 150, 1, -40)
    tabContainer.Position = UDim2.new(0, 0, 0, 40)
    tabContainer.BackgroundColor3 = LuminaLib.Theme.Secondary
    tabContainer.BorderSizePixel = 0
    tabContainer.ScrollBarThickness = 2
    tabContainer.Parent = mainContainer
    
    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.Padding = UDim.new(0, 5)
    tabListLayout.Parent = tabContainer
    
    -- Content container
    local contentContainer = Instance.new("Frame")
    contentContainer.Name = "ContentContainer"
    contentContainer.Size = UDim2.new(1, -160, 1, -50)
    contentContainer.Position = UDim2.new(0, 155, 0, 45)
    contentContainer.BackgroundTransparency = 1
    contentContainer.Parent = mainContainer
    
    -- Advanced Tab Creation
    function window:CreateTab(name, icon)
        local tab = {
            Sections = {},
            Elements = {},
            Visible = false
        }
        
        -- Tab button with icon
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name
        tabButton.Size = UDim2.new(1, -10, 0, 35)
        tabButton.Position = UDim2.new(0, 5, 0, #tabContainer:GetChildren() * 40)
        tabButton.BackgroundColor3 = LuminaLib.Theme.Primary
        tabButton.Text = ""
        tabButton.Parent = tabContainer
        
        Instance.new("UICorner", tabButton).CornerRadius = UDim.new(0, 4)
        
        -- Tab icon
        if icon then
            local iconImage = Instance.new("ImageLabel")
            iconImage.Size = UDim2.new(0, 20, 0, 20)
            iconImage.Position = UDim2.new(0, 10, 0.5, -10)
            iconImage.BackgroundTransparency = 1
            iconImage.Image = icon
            iconImage.ImageColor3 = LuminaLib.Theme.Text
            iconImage.Parent = tabButton
        end
        
        -- Tab text
        local tabText = Instance.new("TextLabel")
        tabText.Size = UDim2.new(1, icon and -40 or -20, 1, 0)
        tabText.Position = UDim2.new(0, icon and 40 or 10, 0, 0)
        tabText.BackgroundTransparency = 1
        tabText.Text = name
        tabText.TextColor3 = LuminaLib.Theme.Text
        tabText.TextSize = 14
        tabText.Font = Enum.Font.GothamSemibold
        tabText.TextXAlignment = Enum.TextXAlignment.Left
        tabText.Parent = tabButton
        
        -- Tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = name.."Content"
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = 2
        tabContent.Visible = false
        tabContent.Parent = contentContainer
        
        local contentPadding = Instance.new("UIPadding")
        contentPadding.PaddingLeft = UDim.new(0, 10)
        contentPadding.PaddingRight = UDim.new(0, 10)
        contentPadding.PaddingTop = UDim.new(0, 10)
        contentPadding.PaddingBottom = UDim.new(0, 10)
        contentPadding.Parent = tabContent
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.Padding = UDim.new(0, 10)
        contentLayout.Parent = tabContent
        
        -- Section creation
        function tab:CreateSection(title)
            local section = {}
            
            local sectionFrame = Instance.new("Frame")
            sectionFrame.Name = title
            sectionFrame.Size = UDim2.new(1, 0, 0, 30) -- Will be adjusted automatically
            sectionFrame.BackgroundColor3 = LuminaLib.Theme.Secondary
            sectionFrame.Parent = tabContent
            
            Instance.new("UICorner", sectionFrame).CornerRadius = UDim.new(0, 4)
            
            local sectionTitle = Instance.new("TextLabel")
            sectionTitle.Size = UDim2.new(1, -20, 0, 30)
            sectionTitle.Position = UDim2.new(0, 10, 0, 0)
            sectionTitle.BackgroundTransparency = 1
            sectionTitle.Text = title
            sectionTitle.TextColor3 = LuminaLib.Theme.Text
            sectionTitle.TextSize = 16
            sectionTitle.Font = Enum.Font.GothamBold
            sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            sectionTitle.Parent = sectionFrame
            
            local sectionContent = Instance.new("Frame")
            sectionContent.Name = "Content"
            sectionContent.Size = UDim2.new(1, -20, 0, 0)
            sectionContent.Position = UDim2.new(0, 10, 0, 35)
            sectionContent.BackgroundTransparency = 1
            sectionContent.Parent = sectionFrame
            
            local sectionLayout = Instance.new("UIListLayout")
            sectionLayout.Padding = UDim.new(0, 8)
            sectionLayout.Parent = sectionContent
            
            -- Auto-size section
            sectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                sectionFrame.Size = UDim2.new(1, 0, 0, sectionLayout.AbsoluteContentSize.Y + 45)
            end)
            
            -- Component creation methods
            function section:AddButton(text, callback)
                local button = Instance.new("TextButton")
                button.Size = UDim2.new(1, 0, 0, 35)
                button.BackgroundColor3 = LuminaLib.Theme.Primary
                button.Text = text
                button.TextColor3 = LuminaLib.Theme.Text
                button.TextSize = 14
                button.Font = Enum.Font.Gotham
                button.Parent = sectionContent
                
                Instance.new("UICorner", button).CornerRadius = UDim.new(0, 4)
                
                button.MouseButton1Click:Connect(function()
                    Utility.createRipple(button)
                    if callback then callback() end
                end)
                
                return button
            end
            
            -- Add more component methods here...
            
            return section
        end
        
        -- Tab selection handling
        tabButton.MouseButton1Click:Connect(function()
            if window.ActiveTab then
                window.ActiveTab.Visible = false
                window.ActiveTab.Parent.BackgroundColor3 = LuminaLib.Theme.Primary
            end
            tabContent.Visible = true
            tabButton.BackgroundColor3 = LuminaLib.Theme.Accent
            window.ActiveTab = tabContent
        end)
        
        -- Set as active if first tab
        if #window.Tabs == 0 then
            tabContent.Visible = true
            tabButton.BackgroundColor3 = LuminaLib.Theme.Accent
            window.ActiveTab = tabContent
        end
        
        window.Tabs[name] = tab
        return tab
    end
    
    -- Make window draggable
    local dragging, dragInput, dragStart, startPos
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainContainer.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    RunService.RenderStepped:Connect(function()
        if dragging and dragInput then
            local delta = dragInput.Position - dragStart
            Utility.tween(mainContainer, {
                Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            })
        end
    end)
    
    -- Toggle UI visibility with keybind
    local toggleKey = config.toggleKey or LuminaLib.Settings.DefaultKeybind
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == toggleKey then
            gui.Enabled = not gui.Enabled
        end
    end)
    
    return window
end

return LuminaLib
